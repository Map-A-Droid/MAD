# Development env
FROM local_mad_production:latest AS dev_test
# Versions of python to install for pyenv. These are used when tox executes specific
# python versions. The correct versions need to be added to tox.ini under tox/envlist
ENV PYTHON_VERSIONS 3.6.0 3.7.0 3.8.0
# User information related to how to run within the shell
ARG USER_NAME=dockeruser
ARG UID=1000
ARG GID=1000
ENV USER $USER_NAME
ENTRYPOINT ["bash"]

# Need to re-add some required dependencies for tox to compile the new envs
RUN apt-get install -y --no-install-recommends \
# pyenv
build-essential libssl-dev zlib1g-dev libbz2-dev \
libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
xz-utils tk-dev libffi-dev liblzma-dev python-openssl git \
# python build
libffi-dev libgdbm-dev libsqlite3-dev libssl-dev zlib1g-dev && \
# Create user
groupadd -g $GID $USER_NAME; \
useradd -l -r -m -u $UID -g $GID $USER_NAME && \
# Install tox
pip install tox

# Install pyenv
ENV HOME=/home/${USER}
ENV PYENV_ROOT $HOME/.pyenv
ENV PATH="$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH"
WORKDIR ${HOME}
USER $USER_NAME
RUN mkdir -p ${HOME}/.cache/pre-commit && \
chown -R ${USER}:${USER} ${HOME}/.cache && \
curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash && \
for version in $PYTHON_VERSIONS; do \
      pyenv install $version; \
      pyenv local $version; \
      pip install --upgrade setuptools pip; \
      pyenv local --unset; \
    done && \
echo "pyenv local $PYTHON_VERSIONS" >> ~/.bashrc && \
pyenv local $PYTHON_VERSIONS
WORKDIR /usr/src/app
